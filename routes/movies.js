const config = require('../config');
const debug = require('debug')('demo:movies');
const express = require('express');
const mongoose = require('mongoose');
const Movie = require('../models/movie');
const ObjectId = mongoose.Types.ObjectId;
const utils = require('./utils');

const router = express.Router();

/**
 * @api {post} /api/movies Create a movie
 * @apiName CreateMovie
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Registers a new movie.
 *
 * @apiUse MovieInRequestBody
 * @apiUse MovieInResponseBody
 * @apiUse MovieValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the movie generated by the server
 *
 * @apiExample Example
 *     POST /api/movies HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "title": "Die Hard",
 *       "rating": 7.4,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97bc0"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://evening-meadow-25867.herokuapp.com/api/movies/58b2926f5e1def0123e97281
 *
 *     {
 *       "id": "58b2926f5e1def0123e97281",
 *       "title": "Die Hard",
 *       "rating": 7.4,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *       "createdAt": "1988-07-12T00:00:00.000Z"
 *     }
 */
router.post('/', utils.requireJson, function(req, res, next) {
  new Movie(req.body).save(function(err, savedMovie) {
    if (err) {
      return next(err);
    }

    debug(`Created movie "${savedMovie.title}"`);

    res
      .status(201)
      .set('Location', `${config.baseUrl}/api/movies/${savedMovie._id}`)
      .send(savedMovie);
  });
});

/**
 * @api {get} /api/movies List movies
 * @apiName RetrieveMovies
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of movies.
 *
 * @apiUse MovieInResponseBody
 * @apiUse Pagination
 *
 * @apiExample Example
 *     GET /api/movies?page=2&pageSize=50 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *     Link: &lt;https://evening-meadow-25867.herokuapp.com/api/movies?page=1&pageSize=50&gt;; rel="first prev"
 *
 *     [
 *       {
 *         "id": "58b2926f5e1def0123e97281",
 *         "title": "Die Hard",
 *         "rating": 7.4,
 *         "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *         "createdAt": "1988-07-12T00:00:00.000Z"
 *       },
 *       {
 *         "id": "58b2926f5e1def0123e97282",
 *         "title": "Die Hard With a Vengance",
 *         "rating": 8.3,
 *         "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *         "createdAt": "1995-05-19T00:00:00.000Z"
 *       }
 *     ]
 */
router.get('/', function(req, res, next) {

  // Count total movies matching the URL query parameters
  const countQuery = queryMovies(req);
  countQuery.count(function(err, total) {
    if (err) {
      return next(err);
    }

    // Prepare the initial database query from the URL query parameters
    let query = queryMovies(req);

    // Paginate
    query = utils.paginate('/api/movies', query, total, req, res);

    // Populate the director if indicated in the "include" URL query parameter
    if (utils.responseShouldInclude(req, 'director')) {
      query = query.populate('director');
    }

    // Execute the query
    query.sort({ title: 1 }).exec(function(err, movies) {
      if (err) {
        return next(err);
      }

      res.send(movies);
    });
  });
});

/**
 * @api {get} /api/movies/:id Retrieve a movie
 * @apiName RetrieveMovie
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one movie.
 *
 * @apiUse MovieIdInUrlPath
 * @apiUse MovieInResponseBody
 * @apiUse MovieNotFoundError
 *
 * @apiExample Example
 *     GET /api/movies/58b2926f5e1def0123e97281 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97281",
 *       "title": "Die Hard",
 *       "rating": 7.4,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *       "createdAt": "1988-07-12T00:00:00.000Z"
 *     }
 */
router.get('/:id', loadMovieFromParamsMiddleware, function(req, res, next) {
  res.send(req.movie);
});

/**
 * @api {patch} /api/movies/:id Partially update a movie
 * @apiName PartiallyUpdateMovie
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a movie's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse MovieIdInUrlPath
 * @apiUse MovieInRequestBody
 * @apiUse MovieInResponseBody
 * @apiUse MovieNotFoundError
 * @apiUse MovieValidationError
 *
 * @apiExample Example
 *     PATCH /api/movies/58b2926f5e1def0123e97281 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "rating": 6.7
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97281",
 *       "title": "Die Hard",
 *       "rating": 6.7,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97bc0",
 *       "createdAt": "1988-07-12T00:00:00.000Z"
 *     }
 */
router.patch('/:id', utils.requireJson, loadMovieFromParamsMiddleware, function(req, res, next) {

  // Update only properties present in the request body
  if (req.body.title !== undefined) {
    req.movie.title = req.body.title;
  }
  if (req.body.rating !== undefined) {
    req.movie.rating = req.body.rating;
  }

  req.movie.save(function(err, savedMovie) {
    if (err) {
      return next(err);
    }

    debug(`Updated movie "${savedMovie.title}"`);
    res.send(savedMovie);
  });
});

/**
 * @api {put} /api/movies/:id Update a movie
 * @apiName UpdateMovie
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Replaces all the movie's data (the request body must represent a full, valid movie).
 *
 * @apiUse MovieIdInUrlPath
 * @apiUse MovieInRequestBody
 * @apiUse MovieInResponseBody
 * @apiUse MovieNotFoundError
 * @apiUse MovieValidationError
 *
 * @apiExample Example
 *     PUT /api/movies/58b2926f5e1def0123e97bc0 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "title": "Die Hard 2",
 *       "rating": 5.6,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97aa2"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97281",
 *       "title": "Die Hard",
 *       "rating": 5.6,
 *       "directorHref": "/api/people/58b2926f5e1def0123e97aa2",
 *       "createdAt": "1988-07-12T00:00:00.000Z"
 *     }
 */
router.put('/:id', utils.requireJson, loadMovieFromParamsMiddleware, function(req, res, next) {

  // Update all properties (regardless of whether the are present in the request body or not)
  req.movie.title = req.body.title;
  req.movie.rating = req.body.rating;

  req.movie.save(function(err, savedMovie) {
    if (err) {
      return next(err);
    }

    debug(`Updated movie "${savedMovie.title}"`);
    res.send(savedMovie);
  });
});

/**
 * @api {delete} /api/movies/:id Delete a movie
 * @apiName DeleteMovie
 * @apiGroup Movie
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a movie.
 *
 * @apiUse MovieIdInUrlPath
 * @apiUse MovieNotFoundError
 *
 * @apiExample Example
 *     DELETE /api/movies/58b2926f5e1def0123e97bc0 HTTP/1.1
 *
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */
router.delete('/:id', loadMovieFromParamsMiddleware, function(req, res, next) {
  req.movie.remove(function(err) {
    if (err) {
      return next(err);
    }

    debug(`Deleted movie "${req.movie.title}"`);
    res.sendStatus(204);
  });
});

/**
 * Returns a Mongoose query that will retrieve movies filtered with the URL query parameters.
 */
function queryMovies(req) {

  let query = Movie.find();

  if (Array.isArray(req.query.director)) {
    const directors = req.query.director.filter(ObjectId.isValid);
    query = query.where('director').in(directors);
  } else if (ObjectId.isValid(req.query.director)) {
    query = query.where('director').equals(req.query.director);
  }

  if (!isNaN(req.query.rating)) {
    query = query.where('rating').equals(req.query.rating);
  }

  if (!isNaN(req.query.ratedAtLeast)) {
    query = query.where('rating').gte(req.query.ratedAtLeast);
  }

  if (!isNaN(req.query.ratedAtMost)) {
    query = query.where('rating').lte(req.query.ratedAtMost);
  }

  return query;
}

/**
 * Middleware that loads the movie corresponding to the ID in the URL path.
 * Responds with 404 Not Found if the ID is not valid or the movie doesn't exist.
 */
function loadMovieFromParamsMiddleware(req, res, next) {

  const movieId = req.params.id;
  if (!ObjectId.isValid(movieId)) {
    return movieNotFound(res, movieId);
  }

  Movie.findById(movieId, function(err, movie) {
    if (err) {
      return next(err);
    } else if (!movie) {
      return movieNotFound(res, movieId);
    }

    req.movie = movie;
    next();
  });
}

/**
 * Responds with 404 Not Found and a message indicating that the movie with the specified ID was not found.
 */
function movieNotFound(res, movieId) {
  return res.status(404).type('text').send(`No movie found with ID ${movieId}`);
}

/**
 * @apiDefine MovieIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the movie to retrieve
 */

/**
 * @apiDefine MovieInRequestBody
 * @apiParam (Request body) {String{3..50}} title The title of the movie (must be unique)
 * @apiParam (Request body) {Number{0..10}} [rating] How the movie has been rated on a scale of 0 to 10
 * @apiParam (Request body) {String} directorHref A hyperlink reference to the person who directed the movie (either the full path to the resource, e.g. `/api/people/58b2926f5e1def0123e97bc0`, or just the ID, e.g. `58b2926f5e1def0123e97bc0`)
 */

/**
 * @apiDefine MovieInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the movie
 * @apiSuccess (Response body) {String} title The title of the movie
 * @apiSuccess (Response body) {Number} rating How the movie has been rated on a scale of 0 to 10
 * @apiSuccess (Response body) {String} directorHref A hyperlink reference to the person who directed the movie
 * @apiSuccess (Response body) {String} createdAt The date at which the movie was registered
 */

/**
 * @apiDefine MovieNotFoundError
 *
 * @apiError {Object} 404/NotFound No movie was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No movie found with ID 58b2926f5e1def0123e97281
 */

/**
 * @apiDefine MovieValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the movie's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Movie validation failed",
 *       "errors": {
 *         "title": {
 *           "kind": "minlength",
 *           "message": "Path `title` (`0`) is shorter than the minimum allowed length (3).",
 *           "name": "ValidatorError",
 *           "path": "title",
 *           "properties": {
 *             "message": "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length (3).",
 *             "minlength": 3,
 *             "path": "title",
 *             "type": "minlength",
 *             "value": "0"
 *           },
 *           "value": "0"
 *         }
 *       }
 *     }
 */

module.exports = router;
